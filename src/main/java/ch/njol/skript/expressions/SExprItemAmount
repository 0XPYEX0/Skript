package src.main.java.ch.njol.skript.expressions;

import ch.njol.skript.Skript;
import ch.njol.skript.classes.Changer;
import ch.njol.skript.lang.Expression;
import ch.njol.skript.lang.ExpressionType;
import ch.njol.skript.lang.SkriptParser;
import ch.njol.skript.lang.util.SimpleExpression;
import ch.njol.util.Kleenean;
import ch.njol.util.coll.CollectionUtils;
import org.bukkit.event.Event;
import org.bukkit.inventory.ItemStack;

@SuppressWarnings({"unused", "unchecked"})
@Name("Item Amount")
@Description("Gets the amout of an <a href='../classes/#itemstack'>item stack</a>.")
@Examples("send \"You have got %item amount of player's tool% %player's tool% in your hand !\" to player")
@Since("2.2-dev23a") //I guess.
public class SExprItemAmount extends SimpleExpression<Number>{
    static {
        Skript.registerExpression(SExprItemAmount.class, Number.class, ExpressionType.PROPERTY, "item[[ ]stack] (amount|size|number) of %itemstack%");
    }

    private Expression<ItemStack> itemStackExpression;

    @Override
    public boolean init(Expression<?>[] expr, int i, Kleenean kleenean, SkriptParser.ParseResult parseResult) {
        itemStackExpression = (Expression<ItemStack>) expr[0];
        return true;
    }

    @Override
    protected Number[] get(Event e) {
        return itemStackExpression.getSingle(e) != null ? new Number[]{itemStackExpression.getSingle(e).getAmount()} : new Number[]{0};
    }

    @Override
    public void change(Event e, Object[] delta, Changer.ChangeMode mode) {
        if (itemStackExpression.getSingle(e) != null) {
            switch (mode) {
                case ADD:
                    itemStackExpression.getSingle(e).setAmount(((Number) delta[0]).intValue() + itemStackExpression.getSingle(e).getAmount());
                    break;
                case SET:
                    itemStackExpression.getSingle(e).setAmount(((Number) delta[0]).intValue());
                    break;
                case REMOVE:
                    itemStackExpression.getSingle(e).setAmount(itemStackExpression.getSingle(e).getAmount() - ((Number) delta[0]).intValue());
                    break;
                case RESET:
                    itemStackExpression.getSingle(e).setAmount(1);
                    break;
            }
        }
    }

    @Override
    public Class<?>[] acceptChange(Changer.ChangeMode mode) {
        return (mode != Changer.ChangeMode.REMOVE_ALL && mode != Changer.ChangeMode.DELETE) ? CollectionUtils.array(Number.class) : null;
    }

    @Override
    public Class<? extends Number> getReturnType() {
        return Number.class;
    }

    @Override
    public boolean isSingle() {
        return true;
    }

    @Override
    public String toString(Event event, boolean b) {
        return getClass().getName();
    }
}
